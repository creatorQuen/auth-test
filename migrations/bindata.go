// Code generated by go-bindata.
// sources:
// 0001_init_table.down.sql
// 0001_init_table.up.sql
// bindata.go
// generate.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_init_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2c\x2d\xc9\x88\x2f\x2d\x4e\x2d\x2a\xb6\xe6\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x62\x87\x91\x88\x2f\x00\x00\x00")

func _0001_init_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_init_tableDownSql,
		"0001_init_table.down.sql",
	)
}

func _0001_init_tableDownSql() (*asset, error) {
	bytes, err := _0001_init_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init_table.down.sql", size: 47, mode: os.FileMode(436), modTime: time.Unix(1667406290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0001_init_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x3f\x4b\x03\x41\x10\x05\xf0\xfe\x3e\xc5\x2b\x13\xb0\x10\x25\x55\xaa\x44\x56\x39\x30\x09\x98\x2d\xec\x8e\x21\x37\xb8\x83\xfb\xe7\x9c\xdd\x35\xc4\x4f\x2f\xc9\xa2\x69\x2c\x6c\x67\x7e\xef\x31\xcc\xda\x3c\xf5\xdb\x65\xd7\x3d\xbc\x98\x95\x35\xb0\xab\xf5\xb3\x41\xff\x88\xed\xce\xc2\xbc\xf6\x7b\xbb\x07\xd5\xe2\x86\x9a\x59\x33\x66\x1d\x00\xc8\x88\xcc\x2a\xe4\x31\xa9\x04\xd2\x13\xde\xf9\x84\x98\x0a\x62\xf5\x1e\x37\x17\x74\x50\xa6\xc2\xe3\x40\x05\x45\x02\xe7\x42\x61\xc2\x51\x8a\x4b\xb5\x4d\xf0\x95\x22\xff\xa6\x5a\x88\x03\x89\xc7\x27\xe9\xc1\x91\xce\xee\x16\x8b\xf9\xb5\xb6\x46\xf9\xa8\xdc\xdc\x44\x39\x1f\x93\x8e\x83\xa3\xec\xfe\xf6\x0d\xfa\xf4\x26\xf1\x3f\x85\xee\x7c\xcc\x8f\xbb\xbf\xbd\xb2\xcb\x7a\x7e\xfe\xd0\x6e\xb3\xe9\xed\xf2\x3b\x00\x00\xff\xff\x8e\xe2\x89\x43\x31\x01\x00\x00")

func _0001_init_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_init_tableUpSql,
		"0001_init_table.up.sql",
	)
}

func _0001_init_tableUpSql() (*asset, error) {
	bytes, err := _0001_init_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init_table.up.sql", size: 305, mode: os.FileMode(436), modTime: time.Unix(1667478798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1667478803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\xe6\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x47\x52\xa9\xa0\x9b\xaf\x00\x95\xd2\x4b\xcf\x57\xd0\xe3\x02\x04\x00\x00\xff\xff\xa3\x8b\x1c\xa6\x4d\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 77, mode: os.FileMode(436), modTime: time.Unix(1667403227, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_init_table.down.sql": _0001_init_tableDownSql,
	"0001_init_table.up.sql":   _0001_init_tableUpSql,
	"bindata.go":               bindataGo,
	"generate.go":              generateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_init_table.down.sql": &bintree{_0001_init_tableDownSql, map[string]*bintree{}},
	"0001_init_table.up.sql":   &bintree{_0001_init_tableUpSql, map[string]*bintree{}},
	"bindata.go":               &bintree{bindataGo, map[string]*bintree{}},
	"generate.go":              &bintree{generateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
